// calculate leading for a given fontsize
@function leading($font-size,$leading-style) {
	$adjustment_factor:$tyfy-leading-adjustment-base;
  @if $leading-style == tall {
		$adjustment_factor:$tyfy-leading-adjustment-tall;
  }
  @else if $leading-style == heading {
		$adjustment_factor:$tyfy-leading-adjustment-heading;
  }
  @else if $leading-style == short {
		$adjustment_factor:$tyfy-leading-adjustment-short;
  }
  
  @if $font-size <= ($tyfy-grid-unit*$adjustment_factor) {
    @return $tyfy-grid-unit;
  }
  @else {
    @return ceil($font-size/($tyfy-grid-unit*$adjustment_factor)) * $tyfy-grid-unit;
  }
}

// calculate a multiple of the base grid unit
@function grid($multiplier) {
	@return $tyfy-grid-unit * $multiplier;
}

// create a specific lightness of a color
@function color($color) {
	@return hsl(hue($color),saturation($color),$lightness);
}

// create a color with the reverse lightness
@function reverse($color) {
	@return hsl(hue($color),saturation($color),(100% - lightness($color)));
}

// create a color with readable lightness
@function readable($color) {
	@if lightness($tyfy-color-foreground) > lightness($tyfy-color-background) {
		@return hsl(hue($color),saturation($color),(0.666*(lightness($tyfy-color-foreground) - lightness($tyfy-color-background))) + lightness($tyfy-color-background));
	}
	@else {
		@return hsl(hue($color),saturation($color),(0.333*(lightness($tyfy-color-background) - lightness($tyfy-color-foreground))) + lightness($tyfy-color-foreground));
	}
}