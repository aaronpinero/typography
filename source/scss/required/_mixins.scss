@mixin clearfix {
  *zoom:1;
  &::before,
  &::after {
    display:table;
    content:"";
    line-height:0;
  }
  &::after {
    clear:both;
  }
}

@mixin visuallyhidden ($type:true) {
  @if $type == false {
    clip:auto;
    height:auto !important;
    margin:0;
    overflow:visible;
    position:static;
    width:auto !important;
  }
  @else {
    border:0;
    clip:rect(0 0 0 0);
    height:1px !important;
    margin:-1px;
    overflow:hidden;
    padding:0;
    position:absolute;
    width:1px !important;
    &.focusable:active,
    &.focusable:focus {
      clip:auto;
      height:auto;
      margin:0;
      overflow:visible;
      position:static;
      width:auto;
    }
  }
}

// based on css-tricks.com/lobotomized-owls/
@mixin set-sibling-margins ($context:all, $measure:$tyfy-spacing-standard) {
  @if $context == headings {
    // headings
    :not(h1):not(h2):not(h3):not(h4):not(h5):not(h6) + h1,
    :not(h1):not(h2):not(h3):not(h4):not(h5):not(h6) + h2,
    :not(h1):not(h2):not(h3):not(h4):not(h5):not(h6) + h3,
    :not(h1):not(h2):not(h3):not(h4):not(h5):not(h6) + h4,
    :not(h1):not(h2):not(h3):not(h4):not(h5):not(h6) + h5,
    :not(h1):not(h2):not(h3):not(h4):not(h5):not(h6) + h6 {
      margin-top:$measure;
    }
  }
  @else if $context == lists {
    // lists
    dl, ol, ul {
      * + * {
        margin-top:$measure;
      }
    }
    dl {
      * + dd {
        margin-top:0;
      }
    }
  }
  @else {
    // everything
    * + * {
      margin-top:$measure;
    }
  }
}

@mixin sibling-margins ($state:on) {
  @if $state == on {
    // everything
    @include set-sibling-margins(all,$tyfy-spacing-standard);
    // lists
    @include set-sibling-margins(lists,$tyfy-spacing-standard/2);
    // headings
    @include set-sibling-margins(headings,$tyfy-spacing-large);
  }
  @else {
    // everything
    @include set-sibling-margins(all,0rem);
    // lists
    @include set-sibling-margins(lists,0rem);
    // headings
    @include set-sibling-margins(headings,0rem);
  }
}

@mixin fade-in ($duration:1000ms) {
  animation:fadein $duration;
}

@keyframes fadein {
  from {
    opacity:0;
  }
  to {
    opacity:1;
  }
}

@mixin button($color_default:$tyfy-color-link-default,$color_active:$tyfy-color-link-active,$border_radius:tygrid(0.25)) {
  background-color:$color_default;
  border:none;
  border-radius:$border_radius;
  color:$tyfy-color-background;
  cursor:pointer;
  display:inline-block;
  font-size:inherit;
  line-height:inherit;
  margin:0;
  padding:tygrid(0.5) tygrid(1.5);
  text-decoration:none;
  text-shadow:0 1px 1px rgba(black,0.2);
  transition:background-color $tyfy-transition-duration-hover, box-shadow $tyfy-transition-duration-hover;
  vertical-align:middle;
  &:hover {
    background-color:$color_active;
    background-image:linear-gradient(to bottom,rgba(0,0,0,0) 0%,rgba(0,0,0,0.1) 100%);
  }
  &:active {
    background-color:$color_active;
    box-shadow:0 0 0 1px rgba(0,0,0,0.15) inset, 0 0 6px rgba(0,0,0,0.2) inset;
  }
  &:focus {
    outline:none;
  }
}

@mixin button-outline($color_default:$tyfy-color-link-default,$color_active:$tyfy-color-link-active,$border_radius:tygrid(0.25)) {
  background-color:transparent;
  border:$tyfy-width-border $color_default solid;
  border-radius:$border_radius;
  color:$color_default;
  cursor:pointer;
  display:inline-block;
  font-size:inherit;
  line-height:inherit;
  margin:0;
  padding:calc(#{tygrid(0.5)} - #{$tyfy-width-border}) calc(#{tygrid(1.5)} - #{$tyfy-width-border});
  text-decoration:none;
  transition:border-color $tyfy-transition-duration-hover, color $tyfy-transition-duration-hover, background-color $tyfy-transition-duration-hover;
  vertical-align:middle;
  &:hover,
  &:active {
    background-color:rgba($color_active,0.1);
    border-color:$color_active;
    color:$color_active;
  }
  &:focus {
    outline:none;
  }
}

// a mixin based on the reverse module that can allow easy color changes on an element and it's children
@mixin mod-colors($bg,$body,$head,$light,$quote,$default,$active,$border,$shade) {
  background-color:$bg;
  color:$body;
  // headings
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    color:$head;
  }

  // links
  a {
    color:$body;
    &[href] {
      border-bottom-color:rgba($default,0.5);
      color:$default;
      &:hover,
      &:active {
        border-bottom-color:rgba($active,0.9);
        color:$active;
      }
    }
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    a {
      color:$head;
      &[href] {
        border-bottom-color:rgba($head,0.5);
        color:$head;
        &:hover,
        &:active {
          border-bottom-color:rgba($active,0.9);
          color:$active;
        }
      }
    }
  }

  // utility
  code {
    background-color:$shade;
    color:mix($body,$active);
  }
  hr {
    border-top-color:$border;
  }
  .button {
    @include button($default,$active);
    color:$background;
  }
  .button-outline {
    @include button-outline($default,$active);
  }
  .light {
    color:$light;
  }

  // unordered list variations
  ul {
    &.list-icons {
      li {
        &::before {
          color:$light;
        }
      }
    }
  }

  // quotes
  blockquote {
    &.pullquote {
      color:$quote;
      &::before {
        color:$border;
      }
      &::after {
        color:$border;
      }
    }
  }

  // tables
  table.striped {
    tr:nth-child(2n) {
      td {
        background-color:$shade;
      }
    }
  }
  table.horizontal-rules {
    border-top-color:$border;
    td,
    th {
      border-bottom-color:$border;
    }
    th[scope="col"] {
      border-bottom-color:$border;
    }
  }
  table.vertical-rules {
    border-left-color:$border;
    td,
    th {
      border-right-color:$border;
    }
    th[scope="row"] {
      border-right-color:$border;
    }
  }
  table.responsive {
    tbody tr + tr {
      @media (max-width:$tyfy-break-table*0.9999) {
        border-top-color:$border;
      }
    }
    td {
      .td-label {
        color:$light;
      }
    }
  }
}