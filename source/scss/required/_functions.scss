// calculate leading for a given fontsize
@function leading($font-size,$leading-style) {
	$adjustment_factor:$tyfy-leading-adjustment-base;
  @if $leading-style == tall {
		$adjustment_factor:$tyfy-leading-adjustment-tall;
  }
  @else if $leading-style == heading {
		$adjustment_factor:$tyfy-leading-adjustment-heading;
  }
  @else if $leading-style == short {
		$adjustment_factor:$tyfy-leading-adjustment-short;
  }
  
  @if $font-size <= ($tyfy-grid-unit*$adjustment_factor) {
    @return $tyfy-grid-unit;
  }
  @else {
    @return ceil($font-size/($tyfy-grid-unit*$adjustment_factor)) * $tyfy-grid-unit;
  }
}

// calculate a multiple of the base grid unit
@function grid($multiplier) {
	@return $tyfy-grid-unit * $multiplier;
}

// calculate a font size from the modular scale based on the base size and scalar value
@function scale($exponent) {
	$i:0;
	$scale:$tyfy-font-size-base;
	@if $exponent < 0 {
		@while $i > $exponent {
			$scale:$scale/$tyfy-font-size-scalar;
			$i:$i - 1;
		}
	}
	@else if $exponent > 0 {
		@while $i < $exponent {
			$scale:$scale*$tyfy-font-size-scalar;
			$i:$i + 1;
		}
	}
	@return $scale;
}

// create a specific lightness of a color
@function color($color,$lightness) {
	@return hsl(hue($color),saturation($color),$lightness);
}

// create a color with the reverse lightness
@function reverse($color) {
	@return hsl(hue($color),saturation($color),(100% - lightness($color)));
}

// output character code strings properly for icon fonts
// see https://github.com/sass/libsass/issues/1115
@function charcode($code) {
  /* stylelint-disable-next-line string-no-newline */
  @return unquote("\"") + unquote(str_insert($code,"\\",1)) + unquote("\"");
}