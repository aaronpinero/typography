// calculate leading for a given fontsize
@function tylead($font-size,$leading-style:base) {
  $adjustment_factor:$tyfy-leading-adjustment-base;
  @if $leading-style == tall {
    $adjustment_factor:$tyfy-leading-adjustment-tall;
  }
  @else if $leading-style == heading {
    $adjustment_factor:$tyfy-leading-adjustment-heading;
  }
  @else if $leading-style == short {
    $adjustment_factor:$tyfy-leading-adjustment-short;
  }

  @if $font-size <= ($tyfy-grid-unit*$adjustment_factor) {
    @return $tyfy-grid-unit;
  }
  @else {
    @return ceil($font-size/($tyfy-grid-unit*$adjustment_factor)) * $tyfy-grid-unit;
  }
}

// calculate a multiple of the base grid unit
@function tygrid($multiplier) {
  @return $tyfy-grid-unit * $multiplier;
}

// calculate a font size from the modular scale based on the base size and scalar value
@function tyscale($exponent) {
  $i:0;
  $scale:$tyfy-font-size-base;
  @if $exponent < 0 {
    @while $i > $exponent {
      $scale:$scale/$tyfy-font-size-scalar;
      $i:$i - 1;
    }
  }
  @else if $exponent > 0 {
    @while $i < $exponent {
      $scale:$scale*$tyfy-font-size-scalar;
      $i:$i + 1;
    }
  }
  @return $scale;
}

// output character code strings properly for icon fonts
// see https://github.com/sass/libsass/issues/1115
@function tychar($code) {
  /* stylelint-disable-next-line string-no-newline */
  @return unquote("\"") + unquote(str_insert($code,"\\",1)) + unquote("\"");
}